name: CMake Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      matrix:
        os: [ ubuntu-latest, windows-latest ]
        build_type: [ Debug, Release ]
        c_compiler: [ gcc, clang, cl ]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            conan_install: |
              Invoke-WebRequest -Uri https://www.python.org/ftp/python/3.9.0/python-3.9.0-amd64.exe -OutFile python-installer.exe
              Start-Process python-installer.exe -ArgumentList '/quiet InstallAllUsers=1 PrependPath=1' -NoNewWindow -Wait
              python -m pip install conan
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            conan_install: sudo apt-get update && sudo apt-get install -y python3-pip && pip3 install conan
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Check for pending reboot (Windows)
        if: runner.os == 'Windows'
        run: |
          $rebootRequired = (Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired' -ErrorAction SilentlyContinue)
          if ($rebootRequired) {
            Write-Output "Reboot required. Continuing with the steps."
          }          

      - name: Set up Conan
        run: ${{ matrix.conan_install }}

      - name: Create Conan profile
        run: conan profile detect

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Package build
        if: matrix.build_type == 'Release'
        run: |
          cd ${{ steps.strings.outputs.build-output-dir }}
          cpack --config CPackConfig.cmake

#      - name: Upload build artifacts
#        if: matrix.build_type == 'Release'
#        uses: actions/upload-artifact@v4
#        with:
#          name: modern-${{ matrix.os }}
#          path: ${{ steps.strings.outputs.build-output-dir }}/packages
